rules_version = '2';
// Allow read/write access on all documents to any user signed in to the application
service cloud.firestore {
  match /databases/{database}/documents {
    match /configurations/{configuration} {
      allow read: if true;
      allow write: if request.auth != null;
    }
     match /courses/{course} {
      allow read: if isAdmin(request, database) || hasReadPermission(request.auth, database, 'courses');
      allow write: if isAdmin(request, database) || hasWritePermission(request.auth, database, 'courses') && courseDataValidated(request);
      allow update: if isAdmin(request, database) || hasUpdatePermission(request.auth, database, 'courses') && courseDataValidated(request);
      allow delete: if isAdmin(request, database) || hasDeletePermission(request.auth, database, 'courses');
    }
    match /courseChapters/{chapter} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    match /notesCategories/{category} {
      allow read: if isAdmin(request, database) || hasReadPermission(request.auth, database, 'notes');
      allow write: if isAdmin(request, database) || hasWritePermission(request.auth, database, 'notes');
      allow update: if isAdmin(request, database) || hasUpdatePermission(request.auth, database, 'notes');
      allow delete: if isAdmin(request, database) || hasDeletePermission(request.auth, database, 'notes');
    }
    match /notes/{note} {
      allow read: if isAdmin(request, database) || hasReadPermission(request.auth, database, 'notes');
      allow write: if isAdmin(request, database) || hasWritePermission(request.auth, database, 'notes');
      allow update: if isAdmin(request, database) || hasUpdatePermission(request.auth, database, 'notes');
      allow delete: if isAdmin(request, database) || hasDeletePermission(request.auth, database, 'notes');
    }
    match /userNotes/{note} {
      allow read: if isAdmin(request, database) || hasReadPermission(request.auth, database, 'notes');
      allow write: if isAdmin(request, database) || hasWritePermission(request.auth, database, 'notes');
      allow update: if isAdmin(request, database) || hasUpdatePermission(request.auth, database, 'notes');
      allow delete: if isAdmin(request, database) || hasDeletePermission(request.auth, database, 'notes');
    }
    match /videos/{video} {
      allow read: if isAdmin(request, database) || hasReadPermission(request.auth, database, 'videos') || resource.data.uploadedBy == request.auth.uid;
      allow write: if isAdmin(request, database) || hasWritePermission(request.auth, database, 'videos');
      allow update: if isAdmin(request, database) || hasUpdatePermission(request.auth, database, 'videos');
      allow delete: if isAdmin(request, database) || hasDeletePermission(request.auth, database, 'videos');
    }
      match /Questions/{question} {
      allow read: if isAdmin(request, database) || hasReadPermission(request.auth, database, 'questions');
      allow write: if isAdmin(request, database) || hasWritePermission(request.auth, database, 'questions');
      allow update: if isAdmin(request, database) || hasUpdatePermission(request.auth, database, 'questions');
      allow delete: if isAdmin(request, database) || hasDeletePermission(request.auth, database, 'questions');
    }
      match /Answers/{answer} {
      allow read: if isAdmin(request, database) || hasReadPermission(request.auth, database, 'questions');
      allow write: if isAdmin(request, database) || hasWritePermission(request.auth, database, 'questions');
      allow update: if isAdmin(request, database) || hasUpdatePermission(request.auth, database, 'questions');
      allow delete: if isAdmin(request, database) || hasDeletePermission(request.auth, database, 'questions');
    }
       match /chats/{chat} {
      allow read, write: if request.auth != null;
    }
    match /messages/{message} {
      allow read, write: if request.auth != null;
    }
     match /videoOverlays/{videoOverlay} {
      allow read: if isAdmin(request, database) || hasReadPermission(request.auth, database, 'videos') || resource.data.uploadedBy == request.auth.uid;
      allow write: if isAdmin(request, database) || hasWritePermission(request.auth, database, 'videos');
      allow update: if isAdmin(request, database) || hasUpdatePermission(request.auth, database, 'videos');
      allow delete: if isAdmin(request, database) || hasDeletePermission(request.auth, database, 'videos');
    }
     match /comments/{comment} {
      allow read: if isAdmin(request, database) || hasReadPermission(request.auth, database, 'comments');
      allow write: if isAdmin(request, database) || hasWritePermission(request.auth, database, 'comments');
      allow update: if isAdmin(request, database) || hasUpdatePermission(request.auth, database, 'comments');
      allow delete: if isAdmin(request, database) || hasDeletePermission(request.auth, database, 'comments');
    }
     match /transcriptInserts/{transcriptInsert} {
      allow read, write: if request.auth != null;
    }
    match /transcriptFixes/{transcriptFix} {
      allow read, write: if request.auth != null;
    }
    match /userGroups/{userGroups} {
      allow read: if isAdmin(request, database) || hasReadPermission(request.auth, database, 'groups');
      allow write: if isAdmin(request, database) || hasWritePermission(request.auth, database, 'groups') && groupDataValidated(request);
      allow update: if isAdmin(request, database) || hasUpdatePermission(request.auth, database, 'groups') && groupDataValidated(request);
      allow delete: if isAdmin(request, database) || hasDeletePermission(request.auth, database, 'groups');
    }
    match /users/{user} {
      allow read: if isAdmin(request, database) || hasReadPermission(request, database, 'users');
      allow write: if isAdmin(request, database) || hasWritePermission(request, database, 'users') && userDataValidated(request);
      allow update: if isAdmin(request, database) || hasUpdatePermission(request, database, 'users') && userDataValidated(request);
      allow delete: if isAdmin(request, database) || hasDeletePermission(request, database, 'users');
    }
    match /userInvites/{userInvites} {
      allow read, write: if request.auth != null;
    }
    match /demoRequests/{demoRequests} {
      allow read: if isAdmin(request, database) || hasReadPermission(request.auth, database, 'demo-requests');
      allow write: if isAdmin(request, database) || hasWritePermission(request.auth, database, 'demo-requests');
      allow update: if isAdmin(request, database) || hasUpdatePermission(request.auth, database, 'demo-requests');
      allow delete: if isAdmin(request, database) || hasDeletePermission(request.auth, database, 'demo-requests');
    }
    match /bookmarks/{bookmarks} {
      allow read: if isAdmin(request, database) || hasReadPermission(request.auth, database, 'bookmarks');
      allow write: if isAdmin(request, database) || hasWritePermission(request.auth, database, 'bookmarks');
      allow update: if isAdmin(request, database) || hasUpdatePermission(request.auth, database, 'bookmarks');
      allow delete: if isAdmin(request, database) || hasDeletePermission(request.auth, database, 'bookmarks');
    }
    match /verifiedDemoUsers/{verifiedDemoUserId} {
      allow write: if true;
      allow read: if request.auth != null;
    }
    match /unVerifiedDemoUsers/{unVerifiedDemoUserId} {
      allow write: if true;
      allow read: if request.auth != null;
    }
    match /feedbackDetails/{detail} {
      allow write: if true;
      allow read: if request.auth != null;
    }
    match /examples/{example} {
      allow write: if true;
      allow read: if request.auth != null;
    }
    match /groups/{group} {
      allow read: if isAdmin(request, database) || hasReadPermission(request.auth, database, 'groups');
      allow write: if isAdmin(request, database) || hasWritePermission(request.auth, database, 'groups');
      allow update: if isAdmin(request, database) || hasUpdatePermission(request.auth, database, 'groups');
      allow delete: if isAdmin(request, database) || hasDeletePermission(request.auth, database, 'groups');
    }
    match /tickets/{ticket} {
      allow read: if isAdmin(request, database) || hasReadPermission(request.auth, database, 'tickets');
      allow write: if isAdmin(request, database) || hasWritePermission(request.auth, database, 'tickets');
      allow update: if isAdmin(request, database) || hasUpdatePermission(request.auth, database, 'tickets');
      allow delete: if isAdmin(request, database) || hasDeletePermission(request.auth, database, 'tickets');
    }
    match /notifications/{notification} {
      allow write: if true;
      allow read: if request.auth != null;
    }
  }
}

function hasReadPermission(request, database, key) { 
    return emailConfirmed(request) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.featurePermissions.permissions[key].read == true;
}

function hasWritePermission(request, database, key) {
    return emailConfirmed(request) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.featurePermissions.permissions[key].create == true;
}

function hasUpdatePermission(request, database, key) {
    return emailConfirmed(request) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.featurePermissions.permissions[key].update == true;
}

function hasDeletePermission(request, database, key) {
    return emailConfirmed(request) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.featurePermissions.permissions[key].delete == true;
}

function emailConfirmed(request) {
    return request.auth != null && request.auth.uid.matches('^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$');
}

function isAdmin(request, database) {
  return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.featurePermissions.permissions.admin.read == true
  && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.featurePermissions.permissions.admin.create == true
  && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.featurePermissions.permissions.admin.update == true
  && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.featurePermissions.permissions.admin.delete == true
}

function userDataValidated(request) {
  return request.resource.data.keys().hasAll(['id', 'name', 'email', 'active', 'groups', 'courses', 'createdAt']);
}

function groupDataValidated(request) {
  return request.resource.data.keys().hasAll(['id', 'name', 'description', 'active', 'createdAt', 'createdBy']);
}

function courseDataValidated(request) {
  return request.resource.data.keys().hasAll(['name', 'courseCode', 'active', 'uniqueCourseCode']);
}